-- dropping everyone
-- DROP VIEW ml_inventory_view;
-- DROP VIEW potion_inventory_view;
-- DROP VIEW total_inventory_view;

-- DROP TABLE cart_items;
-- DROP TABLE carts;

-- DROP TABLE gold_ledger_entries;
-- DROP TABLE ml_ledger_entries;
-- DROP TABLE potion_ledger_entries;

-- DROP TABLE global_inventory;
-- DROP TABLE ml_inventory;
-- DROP TABLE potion_inventory;

-- DROP TABLE processed;
-- DROP TABLE transactions;

-- DROP TABLE ticks;


-- Creating ticks inventory
create table
  public.ticks (
    id bigint generated by default as identity,
    day text null,
    hour integer null,
    created_at timestamp with time zone not null default now(),
    constraint ticks_pkey primary key (id)
  ) tablespace pg_default;

  -- Creating processed
  create table
  public.processed (
    job_id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    type text not null default ''::text,
    constraint processed_pkey primary key (
      job_id,
      type
    )
  ) tablespace pg_default;

-- Creating transactions
create table
  public.transactions (
    id bigint generated by default as identity,
    type text null,
    description text null,
    created_at timestamp with time zone not null default now(),
    constraint transactions_pkey primary key (id)
  ) tablespace pg_default;



-- Creating global inventory
create table
  public.global_inventory (
    id bigint generated by default as identity,
    ml_capacity integer not null default 10000,
    pot_capacity integer not null default 50,
    ml_cap_have integer not null default 1,
    pot_cap_have integer not null default 1,
    gold_threshold_per_unit integer not null default 2500,
    ml_percentage_thresh integer not null default 50,
    pot_percentage_thresh integer not null default 50,
    created_at timestamp with time zone not null default now(),
    constraint global_inventory_pkey primary key (id)
  ) tablespace pg_default;
insert into global_inventory default values;

-- Creating ml inventory
create table
  public.ml_inventory (
    id bigint,
    color text null default 'color'::text,
    potion_type integer[] not null default '{0,0,0,0}'::integer[],
    quantity_threshold integer null default 4,
    percentage_threshold integer null default 25,
    created_at timestamp with time zone not null default now(),
    constraint ml_inventory_pkey primary key (id),
    constraint ml_inventory_color_key unique (color),
    constraint ml_inventory_potion_type_key unique (potion_type)
  ) tablespace pg_default;

insert into ml_inventory (id, color, potion_type, percentage_threshold) 
values (1, 'red', '{1, 0, 0, 0}' ::integer[], 27);

insert into ml_inventory (id, color, potion_type, percentage_threshold) 
values (2, 'green', '{0, 1, 0, 0}' ::integer[], 27); 

insert into ml_inventory (id, color, potion_type, percentage_threshold) 
values (3, 'blue', '{0, 0, 1, 0}' ::integer[], 27); 

insert into ml_inventory (id, color, potion_type, percentage_threshold) 
values (4, 'dark', '{0, 0, 0, 1}' ::integer[], 19); 


-- Creating potion_inventory
create table
  public.potion_inventory (
    id bigint generated by default as identity,
    sku text not null,
    price integer not null default 50,
    potion_type integer[] not null,
    name text null,
    created_at timestamp with time zone not null default now(),
    constraint potion_inventory_pkey primary key (id)
  ) tablespace pg_default;

-- Inserting default potions
insert into potion_inventory (sku, price, potion_type, name) 
values ('gren', 40, '{0, 100, 0 ,0}' ::integer[], 'green potion');

insert into potion_inventory (sku, price, potion_type, name) 
values ('reed', 40, '{100, 0, 0 ,0}' ::integer[], 'red potion');

insert into potion_inventory (sku, price, potion_type, name) 
values ('bluh', 45, '{0, 0, 100 ,0}' ::integer[], 'blue potion');

insert into potion_inventory (sku, price, potion_type, name) 
values ('y_elloo', 30, '{50, 50, 0, 0}' ::integer[], 'yellow potion');

insert into potion_inventory (sku, price, potion_type, name) 
values ('sigh_yan', 30, '{0, 50, 50, 0}' ::integer[], 'cyan potion');

insert into potion_inventory (sku, price, potion_type, name) 
values ('ma_zhen_tuh', 30, '{50, 0, 50, 0}' ::integer[], 'magenta potion');

insert into potion_inventory (sku, price, potion_type, name) 
values ('crem', 30, '{34, 33, 33, 0}' ::integer[], 'white potion');

insert into potion_inventory (sku, price, potion_type, name) 
values ('grrr_AYE', 50, '{25, 25, 25, 25}' ::integer[], 'gray potion');


-- Creating gold_ledger_entries
create table
  public.gold_ledger_entries (
    id bigint generated by default as identity,
    transaction_id bigint null,
    quantity integer null,
    created_at timestamp with time zone not null default now(),
    constraint gold_ledger_entries_pkey primary key (id),
    constraint gold_ledger_entries_id_key unique (id),
    constraint public_gold_ledger_entries_transaction_id_fkey foreign key (transaction_id) references transactions (id) on update cascade on delete restrict
  ) tablespace pg_default;


-- Creating ml_ledger_entries
create table
  public.ml_ledger_entries (
    id bigint generated by default as identity,
    transaction_id bigint null,
    barrel_id bigint null,
    quantity integer null default 0,
    created_at timestamp with time zone not null default now(),
    constraint ml_ledger_entries_pkey primary key (id),
    constraint public_ml_ledger_entries_barrel_id_fkey foreign key (barrel_id) references ml_inventory (id) on update cascade on delete restrict,
    constraint public_ml_ledger_entries_trans_id_fkey foreign key (transaction_id) references transactions (id) on update cascade on delete restrict
  ) tablespace pg_default;


-- Creating potion_ledger_entries
create table
  public.potion_ledger_entries (
    id bigint generated by default as identity,
    transaction_id bigint not null,
    potion_id bigint not null,
    quantity integer not null default 0,
    tick_id bigint null,
    created_at timestamp with time zone not null default now(),
    constraint potion_ledger_entries_pkey primary key (id),
    constraint public_potion_ledger_entries_potion_id_fkey foreign key (potion_id) references potion_inventory (id) on update cascade on delete restrict,
    constraint public_potion_ledger_entries_transaction_id_fkey foreign key (transaction_id) references transactions (id) on update cascade on delete restrict,
    constraint public_potion_ledger_entries_tick_id_fkey foreign key (tick_id) references ticks (id)
  ) tablespace pg_default;


-- Creating carts
create table
  public.carts (
    id bigint generated by default as identity,
    class text null,
    level integer null,
    customer_name text null,
    tick_id bigint null,
    created_at timestamp with time zone not null default now(),
    constraint cartss_pkey primary key (id),
    constraint public_carts_tick_id_fkey foreign key (tick_id) references ticks (id) on update restrict on delete restrict
  ) tablespace pg_default;

  -- Creating cart_items
  create table
  public.cart_items (
    cart_id bigint not null,
    potion_id bigint not null,
    quantity integer null,
    created_at timestamp with time zone not null default now(),
    constraint cart_items_pkey primary key (cart_id, potion_id),
    constraint public_cart_items_cart_id_fkey foreign key (cart_id) references carts (id) on update cascade on delete restrict,
    constraint public_cart_items_potion_id_fkey foreign key (potion_id) references potion_inventory (id) on update cascade on delete restrict
  ) tablespace pg_default;


-- Creating view: ml_inventory_view
create view
  public.ml_inventory_view as
select
  barrels.id as barrel_id,
  barrels.color,
  coalesce(sum(entries.quantity), 0) as quantity
from
  ml_inventory barrels
  left join ml_ledger_entries entries on barrels.id = entries.barrel_id
group by
  barrels.id
order by
  barrels.id;


-- Creating view: potion_inventory_view
create view
  public.potion_inventory_view as
select
  potions.id as potion_id,
  potions.name,
  potions.price,
  coalesce(sum(entries.quantity), 0) as quantity,
  potions.potion_type,
  potions.sku
from
  potion_inventory potions
  left join potion_ledger_entries as entries on potions.id = entries.potion_id
group by
  potions.id
order by
  potions.id;

-- Creating view total_inventory_view
create view
  public.total_inventory_view as
select
  (
    select
      coalesce(sum(gold_ledger_entries.quantity), 0) as sum
    from
      gold_ledger_entries
  ) as gold,
  (
    select
      coalesce(sum(ml_ledger_entries.quantity), 0) as sum
    from
      ml_ledger_entries
  ) as total_ml,
  (
    select
      coalesce(sum(potion_ledger_entries.quantity), 0) as sum
    from
      potion_ledger_entries
  ) as total_potions;