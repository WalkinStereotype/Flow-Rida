-- Creating ticks inventory
create table
  public.ticks (
    id bigint generated by default as identity,
    day text null,
    hour integer null,
    created_at timestamp with time zone not null default now(),
    constraint ticks_pkey primary key (id)
  ) tablespace pg_default;

-- Creating global inventory
create table
  public.global_inventory (
    id bigint generated by default as identity,
    gold integer not null default 100, 
    total_ml integer not null default 0,
    total_potions integer not null default 0,
    ml_capacity integer not null default 10000,
    pot_capacity integer not null default 50,
    ml_cap_have integer not null default 1,
    pot_cap_have integer not null default 1,
    gold_threshold_per_unit integer not null default 2500,
    ml_percentage_thresh integer not null default 80,
    pot_percentage_thresh integer not null default 90,
    created_at timestamp with time zone not null default now(),
    constraint global_inventory_pkey primary key (id)
  ) tablespace pg_default;
insert into global_inventory default values

-- Creating ml inventory
create table
  public.ml_inventory (
    id bigint generated by default as identity,
    color text null default 'color'::text,
    potion_type integer[] not null default '{0,0,0,0}'::integer[],
    ml integer null default 0,
    quantity_threshold integer null default 4,
    percentage_threshold integer null default 25,
    created_at timestamp with time zone not null default now(),
    constraint ml_inventory_pkey primary key (id),
    constraint ml_inventory_color_key unique (color),
    constraint ml_inventory_potion_type_key unique (potion_type)
  ) tablespace pg_default;

insert into ml_inventory (color, potion_type, percentage_threshold) 
values ('red', [1, 0, 0, 0], 27);

insert into ml_inventory (color, potion_type, percentage_threshold) 
values ('green', [0, 1, 0, 0], 27); 

insert into ml_inventory (color, potion_type, percentage_threshold) 
values ('blue', [0, 0, 1, 0], 27); 

insert into ml_inventory (color, potion_type, percentage_threshold) 
values ('dark', [0, 0, 0, 1], 19); 


-- Creating potion_inventory
create table
  public.potion_inventory (
    id bigint generated by default as identity,
    sku text not null,
    price integer not null default 50,
    quantity integer not null default 0,
    potion_type integer[] not null,
    name text null,
    created_at timestamp with time zone not null default now(),
    constraint potion_inventory_pkey primary key (id)
  ) tablespace pg_default;

-- Inserting default potions
insert into potion_inventory (sku, price, potion_type, name) 
values ('gren', 30, [0, 100, 0, 0], 'green potion');

insert into potion_inventory (sku, price, potion_type, name) 
values ('reed', 30, [100, 0, 0, 0], 'red potion');

insert into potion_inventory (sku, price, potion_type, name) 
values ('bluh', 35, [0, 0, 100, 0], 'blue potion');

insert into potion_inventory (sku, price, potion_type, name) 
values ('y_elloo', 30, [50, 50, 0, 0], 'yellow potion');

insert into potion_inventory (sku, price, potion_type, name) 
values ('sigh_yan', 30, [0, 50, 50, 0], 'cyan potion');

insert into potion_inventory (sku, price, potion_type, name) 
values ('ma_zhen_tuh', 30, [50, 0, 50, 0], 'magenta potion');

insert into potion_inventory (sku, price, potion_type, name) 
values ('crem', 30, [34, 33, 33, 0], 'white potion');

-- Creating carts
create table
  public.carts (
    id bigint generated by default as identity,
    class text null,
    level integer null,
    customer_name text null,
    tick_id bigint null,
    created_at timestamp with time zone not null default now(),
    constraint cartss_pkey primary key (id),
    constraint public_carts_tick_id_fkey foreign key (tick_id) references ticks (id) on update restrict on delete restrict
  ) tablespace pg_default;

  -- Creating cart_items
  create table
  public.cart_items (
    cart_id bigint not null,
    potion_id bigint not null,
    quantity integer null,
    created_at timestamp with time zone not null default now(),
    constraint cart_items_pkey primary key (cart_id, potion_id),
    constraint public_cart_items_cart_id_fkey foreign key (cart_id) references carts (id) on update cascade on delete restrict,
    constraint public_cart_items_potion_id_fkey foreign key (potion_id) references potion_inventory (id) on update cascade on delete restrict
  ) tablespace pg_default;

  -- Creating processed
  create table
  public.processed (
    job_id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    type text not null default ''::text,
    constraint processed_pkey primary key (
      job_id,
      type
    )
  ) tablespace pg_default;